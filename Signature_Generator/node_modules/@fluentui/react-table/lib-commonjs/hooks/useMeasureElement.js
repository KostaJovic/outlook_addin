"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useMeasureElement", {
    enumerable: true,
    get: function() {
        return useMeasureElement;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _reactutilities = require("@fluentui/react-utilities");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _reactsharedcontexts = require("@fluentui/react-shared-contexts");
function useMeasureElement() {
    const [width, setWidth] = _react.useState(0);
    const container = _react.useRef(undefined);
    const { targetDocument } = (0, _reactsharedcontexts.useFluent_unstable)();
    // the handler for resize observer
    const handleResize = _react.useCallback(()=>{
        var _container_current;
        const containerWidth = (_container_current = container.current) === null || _container_current === void 0 ? void 0 : _container_current.getBoundingClientRect().width;
        setWidth(containerWidth || 0);
    }, []);
    // Keep the reference of ResizeObserver in the state, as it should live through renders
    const [resizeObserver] = _react.useState((0, _reactutilities.canUseDOM)() ? new ResizeObserver(handleResize) : undefined);
    const measureElementRef = _react.useCallback((el)=>{
        if (!targetDocument || !resizeObserver) {
            return;
        }
        // cleanup previous container
        if (container.current) {
            resizeObserver.unobserve(container.current);
        }
        container.current = undefined;
        if (el === null || el === void 0 ? void 0 : el.parentElement) {
            container.current = el.parentElement;
            resizeObserver.observe(container.current);
            handleResize();
        }
    }, [
        targetDocument,
        resizeObserver,
        handleResize
    ]);
    _react.useEffect(()=>{
        return ()=>resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
    }, [
        resizeObserver
    ]);
    return {
        width,
        measureElementRef
    };
}
